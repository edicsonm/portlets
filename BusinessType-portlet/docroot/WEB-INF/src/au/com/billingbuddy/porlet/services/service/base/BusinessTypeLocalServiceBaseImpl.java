/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package au.com.billingbuddy.porlet.services.service.base;

import au.com.billingbuddy.porlet.services.model.BusinessType;
import au.com.billingbuddy.porlet.services.service.BusinessTypeLocalService;
import au.com.billingbuddy.porlet.services.service.persistence.BusinessTypePersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the business type local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link au.com.billingbuddy.porlet.services.service.impl.BusinessTypeLocalServiceImpl}.
 * </p>
 *
 * @author Edicson Morales
 * @see au.com.billingbuddy.porlet.services.service.impl.BusinessTypeLocalServiceImpl
 * @see au.com.billingbuddy.porlet.services.service.BusinessTypeLocalServiceUtil
 * @generated
 */
public abstract class BusinessTypeLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements BusinessTypeLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link au.com.billingbuddy.porlet.services.service.BusinessTypeLocalServiceUtil} to access the business type local service.
	 */

	/**
	 * Adds the business type to the database. Also notifies the appropriate model listeners.
	 *
	 * @param businessType the business type
	 * @return the business type that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public BusinessType addBusinessType(BusinessType businessType)
		throws SystemException {
		businessType.setNew(true);

		return businessTypePersistence.update(businessType);
	}

	/**
	 * Creates a new business type with the primary key. Does not add the business type to the database.
	 *
	 * @param Buty_ID the primary key for the new business type
	 * @return the new business type
	 */
	@Override
	public BusinessType createBusinessType(int Buty_ID) {
		return businessTypePersistence.create(Buty_ID);
	}

	/**
	 * Deletes the business type with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param Buty_ID the primary key of the business type
	 * @return the business type that was removed
	 * @throws PortalException if a business type with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public BusinessType deleteBusinessType(int Buty_ID)
		throws PortalException, SystemException {
		return businessTypePersistence.remove(Buty_ID);
	}

	/**
	 * Deletes the business type from the database. Also notifies the appropriate model listeners.
	 *
	 * @param businessType the business type
	 * @return the business type that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public BusinessType deleteBusinessType(BusinessType businessType)
		throws SystemException {
		return businessTypePersistence.remove(businessType);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(BusinessType.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return businessTypePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link au.com.billingbuddy.porlet.services.model.impl.BusinessTypeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return businessTypePersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link au.com.billingbuddy.porlet.services.model.impl.BusinessTypeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return businessTypePersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return businessTypePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return businessTypePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public BusinessType fetchBusinessType(int Buty_ID)
		throws SystemException {
		return businessTypePersistence.fetchByPrimaryKey(Buty_ID);
	}

	/**
	 * Returns the business type with the primary key.
	 *
	 * @param Buty_ID the primary key of the business type
	 * @return the business type
	 * @throws PortalException if a business type with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public BusinessType getBusinessType(int Buty_ID)
		throws PortalException, SystemException {
		return businessTypePersistence.findByPrimaryKey(Buty_ID);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return businessTypePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the business types.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link au.com.billingbuddy.porlet.services.model.impl.BusinessTypeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of business types
	 * @param end the upper bound of the range of business types (not inclusive)
	 * @return the range of business types
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<BusinessType> getBusinessTypes(int start, int end)
		throws SystemException {
		return businessTypePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of business types.
	 *
	 * @return the number of business types
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getBusinessTypesCount() throws SystemException {
		return businessTypePersistence.countAll();
	}

	/**
	 * Updates the business type in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param businessType the business type
	 * @return the business type that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public BusinessType updateBusinessType(BusinessType businessType)
		throws SystemException {
		return businessTypePersistence.update(businessType);
	}

	/**
	 * Returns the business type local service.
	 *
	 * @return the business type local service
	 */
	public au.com.billingbuddy.porlet.services.service.BusinessTypeLocalService getBusinessTypeLocalService() {
		return businessTypeLocalService;
	}

	/**
	 * Sets the business type local service.
	 *
	 * @param businessTypeLocalService the business type local service
	 */
	public void setBusinessTypeLocalService(
		au.com.billingbuddy.porlet.services.service.BusinessTypeLocalService businessTypeLocalService) {
		this.businessTypeLocalService = businessTypeLocalService;
	}

	/**
	 * Returns the business type remote service.
	 *
	 * @return the business type remote service
	 */
	public au.com.billingbuddy.porlet.services.service.BusinessTypeService getBusinessTypeService() {
		return businessTypeService;
	}

	/**
	 * Sets the business type remote service.
	 *
	 * @param businessTypeService the business type remote service
	 */
	public void setBusinessTypeService(
		au.com.billingbuddy.porlet.services.service.BusinessTypeService businessTypeService) {
		this.businessTypeService = businessTypeService;
	}

	/**
	 * Returns the business type persistence.
	 *
	 * @return the business type persistence
	 */
	public BusinessTypePersistence getBusinessTypePersistence() {
		return businessTypePersistence;
	}

	/**
	 * Sets the business type persistence.
	 *
	 * @param businessTypePersistence the business type persistence
	 */
	public void setBusinessTypePersistence(
		BusinessTypePersistence businessTypePersistence) {
		this.businessTypePersistence = businessTypePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("au.com.billingbuddy.porlet.services.model.BusinessType",
			businessTypeLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"au.com.billingbuddy.porlet.services.model.BusinessType");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return BusinessType.class;
	}

	protected String getModelClassName() {
		return BusinessType.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = businessTypePersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = au.com.billingbuddy.porlet.services.service.BusinessTypeLocalService.class)
	protected au.com.billingbuddy.porlet.services.service.BusinessTypeLocalService businessTypeLocalService;
	@BeanReference(type = au.com.billingbuddy.porlet.services.service.BusinessTypeService.class)
	protected au.com.billingbuddy.porlet.services.service.BusinessTypeService businessTypeService;
	@BeanReference(type = BusinessTypePersistence.class)
	protected BusinessTypePersistence businessTypePersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private BusinessTypeLocalServiceClpInvoker _clpInvoker = new BusinessTypeLocalServiceClpInvoker();
}